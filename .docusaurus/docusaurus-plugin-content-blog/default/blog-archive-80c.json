{
  "blogPosts": [
    {
      "id": "embedding-static-files-in-cli-with-go-embed",
      "metadata": {
        "permalink": "/blog/embedding-static-files-in-cli-with-go-embed",
        "source": "@site/blog/How-to-use-go-embed-in-cli-programs/index.md",
        "title": "Embedding templates and static files in CLI using //go:embed",
        "description": "This article is for someone who just started writing Go, and have no idea about //go 1.16.",
        "date": "2022-08-19T03:05:06.000Z",
        "formattedDate": "August 19, 2022",
        "tags": [
          {
            "label": "Golang",
            "permalink": "/blog/tags/golang"
          },
          {
            "label": "Go",
            "permalink": "/blog/tags/go"
          },
          {
            "label": "CLI",
            "permalink": "/blog/tags/cli"
          },
          {
            "label": "static files",
            "permalink": "/blog/tags/static-files"
          }
        ],
        "readingTime": 3.14,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Saintmalik",
            "title": "Pentester and an AppSec Guy",
            "url": "https://github.com/saintmalik",
            "imageURL": "https://avatars.githubusercontent.com/u/37118134?v=4",
            "key": "malik"
          }
        ],
        "frontMatter": {
          "slug": "embedding-static-files-in-cli-with-go-embed",
          "title": "Embedding templates and static files in CLI using //go:embed",
          "authors": "malik",
          "tags": [
            "Golang",
            "Go",
            "CLI",
            "static files"
          ]
        },
        "nextItem": {
          "title": "Setting up Azure AD B2C for User authentication in Power Pages",
          "permalink": "/blog/setting-up-azure-AD-B2C-for-user-auth-in-power-pages"
        }
      },
      "content": "This article is for someone who just started writing Go, and have no idea about //go:embed feature which came with the released version: 1.16.\n\nA project I was working on recently led to the discoveries.\n\n<!--truncate-->\n\n## So what is //go:embed?\n\nThe embed package allows us to embed static/template or directories into our Go program\n\n## When should you use //go:embed in your project?\n//go:embed can be used in situations where the file or assets won't change or be modified after build, dont shoot yourself in the leg by embedding files that are subjected to modifications e.g ```config.json``` and all type of files similar to this\n\nexamples of assets that you can use ```//go:embed``` for are ```templates/css``` files and anything similar to this\n\n## How to use it in CLI programs?\n\nIf you are writing your CLI tool using frameworks like cobra, urfave-cli, you will know that your commands files e.g root.go and the likes are alway in a \"cmd\" folder\n\n```mdx\nhello_cobra\n├─ cmd\n│  ├─ config.go\n│  ├─ root.go\n│  └─ run.go\n├─ go.mod\n├─ go.sum\n├─ main.go\n└─ templates\n   ├─ config.html\n   ├─ creds.html\n   └─ index.html\n```\n\nand the rule that comes with //go:embed is that you can only embed via your root folder, so lets say you have your template folder inside your main project folder, just the way my project folder is above\n\nThen you can easily embed using main.go file in your root folder or any other go file in root folder\n\nbut in situation where your template files is needed or called inside your \"cmd\" folder, i need to embed my template from my cmd>>config.go file.\n\nIt becomes tricky from there? you get it right? meaning  //go:embed won't work, it will start spitting errors like ```pattern ****/: no matching files found```\n\nbecause you can only use embed from the root files and now you need to call it from a file inside the \"cmd\" which is not available on the root.\n\ni was stucked man, spent two to three days thinking and searching the internet for solution, pushing my project depends on getting the static/template assets files embed.\n\nNow you probably thinking why dont i move my template folder into the \"cmd\" folder? yes i did that too, but using   ```//go:embed templates/*.html``` wasnt working still\n\nbut at last i stumbled upon https://github.com/plentico/plenti repo, the guy did what i have been trying to do, infact he has lot of static files\n\nbut what he did is different from what every article i have come acrossed did and shared, he used this syntax ```//go:embed all:yourfolders/*``` while other content out there states to use this ```//go:embed yourfolders/*```\n\ndon't get me wrong both ar correct, but ```//go:embed all:yourfolders/*```  works well for embedding from files that are not in root folder, in situations where your folder is like this\n\n```mdx\nhello_cobra\n├─ cmd\n│  ├─ config.go\n│  ├─ root.go\n│  └─ run.go\n└─ templates\n   ├─ config.html\n   ├─ creds.html\n   └─ index.html\n├─ go.mod\n├─ go.sum\n├─ main.go\n```\n\nand how is i embedthe templates in my config.go\n\n```go title=\"hello_cobra/cmd/config.go\"\npackage cmd\n\nimport (\n\t\"embed\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"text/template\"\n\n\t\"github.com/spf13/cobra\"\n)\n\n//go:embed all:templates/*.html   //this means, embed all files ending with \".html\"  in the templates folder even when ignored\nvar TempFs embed.FS //assign the variable TempFs to embed.FS, FS means (File System)\n\nvar tmpl *template.Template //tmpl is a type pointer to template.Template,\n\n\nfunc init() {\n\trootCmd.AddCommand(configCmd)\n\ttmpl = template.Must(template.ParseFS(TempFs, \"templates/*.html\"))\n}\n\nfunc myTempl(w http.ResponseWriter, _ *http.Request) {\n\n///you can do all your codes here,\n\terr = tmpl.ExecuteTemplate(w, \"creds.html\", nil) //Executing the template\n\tif err != nil {\n\t\tlog.Fatal(\"Error loading index template: \", err) //log an error, if the template cant be started\n\t}\n}\n```\n\nAnd that's all, If you want to learn more about //go:embed read over here <a href=\"https://pkg.go.dev/embed\">here</a>."
    },
    {
      "id": "setting-up-azure-AD-B2C-for-user-auth-in-power-pages",
      "metadata": {
        "permalink": "/blog/setting-up-azure-AD-B2C-for-user-auth-in-power-pages",
        "source": "@site/blog/Setting up Azure AD B2C for user authentication in Power Pages/index.md",
        "title": "Setting up Azure AD B2C for User authentication in Power Pages",
        "description": "Using Azure AD B2C as an identity provider in Power Pages",
        "date": "2022-08-19T03:05:06.000Z",
        "formattedDate": "August 19, 2022",
        "tags": [
          {
            "label": "Power Platform",
            "permalink": "/blog/tags/power-platform"
          },
          {
            "label": "LowCode",
            "permalink": "/blog/tags/low-code"
          },
          {
            "label": "Power Pages",
            "permalink": "/blog/tags/power-pages"
          },
          {
            "label": "Auth",
            "permalink": "/blog/tags/auth"
          }
        ],
        "readingTime": 3.16,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Favour Adeshina",
            "title": "Power Platform Advocate",
            "url": "https://github.com/Favour-dgreat",
            "imageURL": "https://avatars.githubusercontent.com/u/53022031?v=4",
            "key": "favour"
          }
        ],
        "frontMatter": {
          "slug": "setting-up-azure-AD-B2C-for-user-auth-in-power-pages",
          "title": "Setting up Azure AD B2C for User authentication in Power Pages",
          "authors": "favour",
          "tags": [
            "Power Platform",
            "LowCode",
            "Power Pages",
            "Auth"
          ]
        },
        "prevItem": {
          "title": "Embedding templates and static files in CLI using //go:embed",
          "permalink": "/blog/embedding-static-files-in-cli-with-go-embed"
        },
        "nextItem": {
          "title": "Using Data Connectors while building Power Apps",
          "permalink": "/blog/using-data-connectors-with-microsoft-power-apps"
        }
      },
      "content": "## Using Azure AD B2C as an identity provider in Power Pages\n\nIn this article, we will be taking a detailed breakdown of how to use **Microsoft Azure AD B2C as an identity provider in Power Pages, for setting up authentication**.\n<!-- truncate -->\n\nLet's get right into it!\n\n# What is Azure AD B2C?\n\nAzure Active Directory Business-to-Customer (Azure AD B2C) is an identity management service of Microsoft Azure that enables custom control of how your customers sign up, sign in, and manage their profiles when using your iOS, Android, .NET, single-page (SPA), and other applications.\n\nAzure AD B2C is a separate service from Azure Active Directory (Azure AD). It is built on the same technology as Azure AD but for a different purpose.\n\nAzure AD B2C provides a highly customizable **User Experience** to suit and blend with your brand seamlessly. Allowing you to customize every page when a user signs up, signs in, and modifies their profile information, providing a native look and feel that follows your web, mobile, and other applications. \n\nCheck out the docs for more information [Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/).\n\n# Using Azure AD B2C in Power Pages\nPower Pages supports authentication processes and provides various authentication providers to handle authentication. \n\n\n![Screenshot 2022-07-12 at 19.41.53.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657651546255/11Q3FMgDf.png)\n\nWith this, you can provide and set up several authentication providers on your website. \n\nNow, let us see how to set up Azure AD B2C to handle our authentication needs for our websites while building with **Microsoft Power Pages**.\n\n**Requirements**\n\n1. To duly follow this tutorial you need to have an Azure account and an active subscription plan\n\n2. Before you can use the Azure AD B2C for authentication, they must be registered in a tenant that you manage.\n\n3. Also, you need to have Microsoft.AzureActiveDirectory as a resource provider for the Azure subscription you're using. \n\nFollow this tutorial, to **[Create an Azure Active Directory B2C tenant](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-tenant)**\n\nIf you followed the tutorial carefully, you should have successfully created your Azure Active Directory B2C tenant. \n\n**Next Step:**\nThe next step for setting up Azure AD B2C authentication for Power Pages is to **Register a web application in Azure Active Directory B2C**. \n\nKindly follow this tutorial: **[Register a web application in Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-register-applications?tabs=app-reg-ga)**\n\nIf you successfully followed the docs properly, you should have your web application registered in Azure Active Directory B2C.\n\nFollowing the screenshot below, you should have your registered web application:\n\n![Screenshot 2022-07-15 at 00.00.39.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657839670006/FPVddK1M2.png)\n\nThe next thing to do is to **set up user flows and custom policies**. \nLet us follow this tutorial/documentation: [Create User flows and custom policies in Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-user-flows?pivots=b2c-user-flow)\n\nAfter following the previous tutorial in the link above, **(kindly get back to it, before you proceed with this step)**, let us head back to Identity Configuration Page in Power Pages, to complete our Configuration settings.\n\n![Main.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657842228366/z3APN-v_L.png)\n\n**A few things to note, while configuring your Identity Configuration page in Power Pages: \n**\n1. Authority: This is the issuer URL defined in the metadata of the sign-up & sign-in policy user flow \n![download.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657842681698/htdAL6Oc2.png)\n\n2. Client ID: The ID associated with the application created in Azure Active Directory B2C tenant to be used with the portal. \n![download (1).png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657843099050/odu1y60UV.png)\n\n3. Redirect URL: This is the location where Azure AD B2C will send an authentication response. Enter the portal URL. You only need to change the redirect URI if you're using a custom domain name.\n\nKindly follow this tutorial/documentation to complete the Configuration settings on Power Pages: [Configure the Azure Active Directory B2C provider manually](https://docs.microsoft.com/en-us/power-apps/maker/portals/configure/configure-azure-ad-b2c-provider-manual?WT.mc_id=ppac_inproduct_resources).\n\nHit the confirm button to save and apply the settings applied. \n\n![Screenshot 2022-07-15 at 01.03.20.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657843456855/BwuTd6Jpn.png)\n\nNow test your application and if you followed all the steps duly you would have set up and configured Azure AD B2C for user authentication in Microsoft Power Pages."
    },
    {
      "id": "using-data-connectors-with-microsoft-power-apps",
      "metadata": {
        "permalink": "/blog/using-data-connectors-with-microsoft-power-apps",
        "source": "@site/blog/Using-data-connectors-with-power-apps/index.md",
        "title": "Using Data Connectors while building Power Apps",
        "description": "Data is very important while building every native application, this is because in every application, it is either you are requesting/fetching data, sending data, or perhaps doing both. And in this article we will be learning more about data and data connectors, and how to make use of them in a Power Apps Project.",
        "date": "2022-08-19T03:05:06.000Z",
        "formattedDate": "August 19, 2022",
        "tags": [
          {
            "label": "Power Platform",
            "permalink": "/blog/tags/power-platform"
          },
          {
            "label": "LowCode",
            "permalink": "/blog/tags/low-code"
          },
          {
            "label": "Power Apps",
            "permalink": "/blog/tags/power-apps"
          },
          {
            "label": "Data Connectors",
            "permalink": "/blog/tags/data-connectors"
          }
        ],
        "readingTime": 3.23,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Favour Adeshina",
            "title": "Power Platform Advocate",
            "url": "https://github.com/Favour-dgreat",
            "imageURL": "https://avatars.githubusercontent.com/u/53022031?v=4",
            "key": "favour"
          }
        ],
        "frontMatter": {
          "slug": "using-data-connectors-with-microsoft-power-apps",
          "title": "Using Data Connectors while building Power Apps",
          "authors": "favour",
          "tags": [
            "Power Platform",
            "LowCode",
            "Power Apps",
            "Data Connectors"
          ]
        },
        "prevItem": {
          "title": "Setting up Azure AD B2C for User authentication in Power Pages",
          "permalink": "/blog/setting-up-azure-AD-B2C-for-user-auth-in-power-pages"
        },
        "nextItem": {
          "title": "Using the Timer Control Input Component in Power Apps",
          "permalink": "/blog/using-timer-control-input-component-in-power-apps"
        }
      },
      "content": "Data is very important while building every native application, this is because in every application, it is either you are requesting/fetching data, sending data, or perhaps doing both. And in this article we will be learning more about data and data connectors, and how to make use of them in a Power Apps Project. \n\n<!-- truncate -->\n\n## What are Data Connectors?\nIn very clear terms, \"Data Connectors\" connects or communicates with the data source in every power app. Data is stored in a data source, and you bring that data into your app by creating a connection.\n\nIn Microsoft Power Apps a connector may provide tables of data or actions. Some connectors provide only tables, some provide only actions, and some provide both. Also, your connector may be either a **standard or custom connector**.\n\n\n\n### Popular Connectors used in Microsoft Power Apps\n\n![Screenshot 2022-03-23 at 21.41.16.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648068186548/PpzISxxP8.png)\n\n\n### Standard and Custom Connectors\nStandard Connectors are connectors provided by Power Apps for many commonly used data sources. If Power Apps has a standard connector for the type of data source that you want to use, you should use that connector, those are what are referred to as Standard Custom Connectors.\n\nThe image above showing popular connectors are all Standard Connectors. \n\nBut in a situation where you want to connect to other types of data sources, such as the one you built, then they are referred to as Custom Connectors \n\nCheck out this article for more on  Custom Connectors - [Register and use custom connectors](https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/register-custom-api)\n\n\n## Connecting to Microsoft Dataverse\n\nMicrosoft Dataverse lets you securely store and manage data that are used by business applications. \nData within Dataverse is stored within a set of tables. A table is a set of rows (formerly referred to as records) and columns (formerly referred to as fields/attributes). Each column in the table is designed to store a certain type of data, for example, name, age, salary, and so on.\n\nNow with the understanding of the Dataverse let us get into this codelab!\n\n## Building a simple record-keeping app with Google Sheets (a Standard Connector)\n1. [Sign in to Power Apps](https://powerapps.microsoft.com/en-gb/) If you don't already have a Power Apps account, click the Start Free button. \n\n![Screenshot 2022-03-23 at 22.08.09.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648069794826/R9dcIU9gf.png)\n\n2. After successful sign in to Power Apps this is what you should have now! \n\n![Screenshot 2022-03-23 at 22.06.26.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648070361469/Nw9BDRTVW.png) \nClick on the Dataverse card. \n\n3. You should have this screen now, showing previous connections. Then you click on New Connection\n\n![Screenshot 2022-03-23 at 22.44.33.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648071904563/nF1IbpMyF.png)\n\n4. If you followed the previous step properly, you should have this now, then click on Google Sheets and authenticate with your Google account. \n\n![Screenshot 2022-03-23 at 22.49.21.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648072193448/xuF2XoCxq.png)\nNow you choose a dataset, from a set of previous google sheet documents or perhaps you search for the one you have in mind just as I have done here. \n\n5. The next option is to choose a table or create a new one. \n\n![Screenshot 2022-03-23 at 22.50.57.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648072298364/RbnL3xXvZ.png)\n\n6. And finally you should have a very simple app for you with the data from the table you chose or created. Just as I have here too. \n\n![Screenshot 2022-03-23 at 22.52.24.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1648072410585/B6m12frDk.png)\n\nThat is the end of this codelab and hope you were able to follow it properly. \n\nI will also be ending this article here now, leaving you with resources for further study. \n\n## Resources\n1. [Overviewof connectors for canvas apps](https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/connections-list)\n2. [Use custom connectors in a Power Apps canvas app](https://docs.microsoft.com/en-us/learn/modules/use-custom-connectors-in-powerapps-canvas-app/)\n3. [Microsoft Dataverse Documentation](https://docs.microsoft.com/en-us/powerapps/maker/data-platform/)\n4. [Use custom connectors with the timeline control](https://docs.microsoft.com/en-us/powerapps/maker/model-driven-apps/custom-connectors-timeline-control)\n\nSo concluding now, in this article we understood what are Data connectors, Popular connectors used in Microsoft Power Apps, Standard and Custom connectors, Connecting to Microsoft Dataverse and finally we had a codelab that taught us how to Connect or Build an app with data gotten from Google Sheet, which is an example of a Standard Connector. \n\nThank You"
    },
    {
      "id": "using-timer-control-input-component-in-power-apps",
      "metadata": {
        "permalink": "/blog/using-timer-control-input-component-in-power-apps",
        "source": "@site/blog/using-timer-control-input-component-in-power-apps/index.md",
        "title": "Using the Timer Control Input Component in Power Apps",
        "description": "In this article we will be following up from our previous article Using Data Connectors with Microsoft Power Apps to learn about the Timer Control input component used in Microsoft Power Apps.",
        "date": "2022-08-19T03:05:06.000Z",
        "formattedDate": "August 19, 2022",
        "tags": [
          {
            "label": "Power Platform",
            "permalink": "/blog/tags/power-platform"
          },
          {
            "label": "LowCode",
            "permalink": "/blog/tags/low-code"
          },
          {
            "label": "Power Pages",
            "permalink": "/blog/tags/power-pages"
          },
          {
            "label": "Auth",
            "permalink": "/blog/tags/auth"
          }
        ],
        "readingTime": 3.91,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Favour Adeshina",
            "title": "Power Platform Advocate",
            "url": "https://github.com/Favour-dgreat",
            "imageURL": "https://avatars.githubusercontent.com/u/53022031?v=4",
            "key": "favour"
          }
        ],
        "frontMatter": {
          "slug": "using-timer-control-input-component-in-power-apps",
          "title": "Using the Timer Control Input Component in Power Apps",
          "authors": "favour",
          "tags": [
            "Power Platform",
            "LowCode",
            "Power Pages",
            "Auth"
          ]
        },
        "prevItem": {
          "title": "Using Data Connectors while building Power Apps",
          "permalink": "/blog/using-data-connectors-with-microsoft-power-apps"
        },
        "nextItem": {
          "title": "Creating a Node.js web server with Express Framework",
          "permalink": "/blog/Create-a-Node.js-web-server-with-Express-Framework"
        }
      },
      "content": "In this article we will be following up from our previous article **Using Data Connectors with Microsoft Power Apps** to learn about the Timer Control input component used in Microsoft Power Apps. \n\n<!-- truncate -->\n\n## What is Timer Control in PowerApps?\nTimer Control in PowerApps, is simply an Input Component amongst the Insert tools used for building apps. \n\n![Screenshot 2022-04-23 at 23.20.40.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650752465275/HaJJ1AO--.png)\n\nIt's also a control that can determine how your app responds after a certain amount of time.\n\nTimers can, for example, determine how long a control appears or change other properties of a control after a certain amount of time has passed.\n\n\n### Key Properties for using the Timer Control Component in Power Apps\n\n**Duration** – This is how long a timer runs in milliseconds. The maximum is 24 hours expressed in milliseconds. Default is 60 seconds.\n\n**OnTimerEnd** – This is an actions to perform when a timer finishes running.\n\n**Repeat** – The repeat function determines if a timer automatically restarts when it finishes couting, making use of the set time.\n\n**AutoPause** – This function determines if the timer control automatically pauses, after a user navigates to a different screen.\n\n**AutoStart** – The AutoStart function determines if the timer control automatically starts to play when the user navigates to the screen that contains that control.\n\n**OnSelect** – OnSelect is used to set actions to perform when the user taps or clicks the Timer component.\n\n**OnTimerStart** – OnTimerStart helps a user to set actions to perform when a timer starts to run.\n\n\n# Implementing Timer Control Component \nFollowing up from a previous article, where we built an application using Power Apps, kindly go back to the article before you proceed; [Using Data Connectors with Microsoft Power Apps](https://thecompletehub.tech/understanding-data-connectors-with-microsoft-power-apps). Also, you can check out this video, to understand better, before we proceed:\n\n%[https://www.youtube.com/shorts/sitW9uOeTvg]\n\nNow let us implement our Timer Control Component in our previously built Power App: \n\nGo to Screen 3 **(Our Success Screen)**\n![Screenshot 2022-04-23 at 23.36.24.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650753412047/8xDuLRr3X.png)\n\nClick on the Insert Tool Item and Search for \"Timer\"\n![Screenshot 2022-04-23 at 23.38.06.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650753546954/uo87lDPs4.png)\n\nAdd the Timer to Screen3 Components\n\n![Screenshot 2022-04-23 at 23.40.03.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650753637767/XaTil-hWw.png)\n\n**Now, we need to set a few parameters for the Timer Component:**\n\nFirstly, is the duration. \n\nYou can specify in milliseconds here. Example: 3000 i.e. 3 seconds\n![Screenshot 2022-04-23 at 23.42.13.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650753746393/MRzZPk_pB.png)\n\nNext, you’ll need to set the Start flag. By default, this is set to false. The Start is triggered when the value is set to True. This needs to be dynamically set from elsewhere i.e. in this example, you’ll need to trigger from where you come to this screen so that the Timer starts the countdown.\n\n![Screenshot 2022-04-23 at 23.44.00.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650753870590/sEt69kDsO.png)\n\nNow, the way I set this is, first I create a variable from the place where I want to trigger the Timer to go off, that is my previous Screen (Screen2).  I’m creating and setting a variable called startTimer and setting the value to true:\n\n![Screenshot 2022-04-24 at 00.09.54.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650755420667/M5h7eltB1.png)\n\nYou will then return to your Timer Component in Screen3 and set this variable startTimer to the Start property.\n\n![Screenshot 2022-04-23 at 23.53.36.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650754432720/q1AghZ4ve.png)\n\nAlso, you’ll need to set what needs to happen when the Timer ends. So, you have to write the OnTimerEnd property as to what will happen once the Timer ends.\nHere, you’ll Navigate to the 'Screen4’ as per our scenario and then also, set the startTimer flag to ‘false’ since you want to reuse this again for the next submission.\n\nNow this works fine as Screen 4 loads immediately after the duration of the timer is elapsed.\n\nFinally, I will hide the timer component from showing on the screen. \nTo do this I will set the visible property to false. It is set to true by default, and by doing this immediately our timer becomes not visible but still works properly. \n\n\n![Screenshot 2022-04-24 at 00.14.39.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650755803020/zV9xntL2b.png)\n\n\n![Screenshot 2022-04-24 at 00.14.52.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650755832207/AivDtFZg9.png)\n\nIn conclusion, with this new feature added to our app, we can now remove the previous buttons added to navigate to Screen4 from the Success Screen (Screen3), and this is the new look for Screen 3\n\n![Screenshot 2022-04-24 at 00.19.24.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1650755992913/aB_UqMDol.png)\n\nNow we have improved our app by using the Timer control component to our app. \n\n\nAs said earlier to fully understand everything discussed up till this point, kindly read and understand the previous article on **Using Data Connectors with Microsoft Power Apps** \n\nFinally, I will be ending this article, with helpful resources to aid you learning\n\n## Learning Resources\n\n1. [Timer control in Power Apps](https://docs.microsoft.com/en-us/power-apps/maker/canvas-apps/controls/control-timer?WT.mc_id=DX-MVP-5003911)\n2. [Formula reference for Power Apps](https://docs.microsoft.com/en-us/power-apps/maker/canvas-apps/formula-reference)\n3. [Get started with formulas in canvas apps](https://docs.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-formulas)\n4. [Controls and properties in canvas apps](https://docs.microsoft.com/en-us/power-apps/maker/canvas-apps/reference-properties)\n5. [Power Apps Ideas (preview)](https://docs.microsoft.com/en-us/power-apps/maker/canvas-apps/power-apps-ideas)\n6. [Microsoft's Power Platform - LowCode Platform](https://thecompletehub.tech/microsofts-power-platform-lowcode-platform)"
    },
    {
      "id": "Create-a-Node.js-web-server-with-Express-Framework",
      "metadata": {
        "permalink": "/blog/Create-a-Node.js-web-server-with-Express-Framework",
        "source": "@site/blog/Create Node.js Web server/index.md",
        "title": "Creating a Node.js web server with Express Framework",
        "description": "Node.js is a javascript framework that allows us to run javascript outside the browser, it is a javascript runtime built on chrome v8 engine.",
        "date": "2022-08-16T15:15:21.000Z",
        "formattedDate": "August 16, 2022",
        "tags": [
          {
            "label": "Node.js",
            "permalink": "/blog/tags/node-js"
          },
          {
            "label": "Backend development",
            "permalink": "/blog/tags/backend-development"
          },
          {
            "label": "express",
            "permalink": "/blog/tags/express"
          },
          {
            "label": "Web server",
            "permalink": "/blog/tags/web-server"
          }
        ],
        "readingTime": 3.11,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Jesse Oluwadare",
            "title": "JavaScript Developer",
            "url": "https://github.com/jesse-crypted",
            "imageURL": "https://avatars.githubusercontent.com/u/98085822?v=4",
            "key": "jesse"
          }
        ],
        "frontMatter": {
          "slug": "Create-a-Node.js-web-server-with-Express-Framework",
          "title": "Creating a Node.js web server with Express Framework",
          "authors": "jesse",
          "tags": [
            "Node.js",
            "Backend development",
            "express",
            "Web server"
          ]
        },
        "prevItem": {
          "title": "Using the Timer Control Input Component in Power Apps",
          "permalink": "/blog/using-timer-control-input-component-in-power-apps"
        },
        "nextItem": {
          "title": "Introduction to Microsoft Power Platform",
          "permalink": "/blog/introduction-to-power-platform"
        }
      },
      "content": "Node.js is a javascript framework that allows us to run javascript outside the browser, it is a javascript runtime built on chrome v8 engine.\r\n\r\nSkipping the not-so-boring stuff we will be trying our hands at building a simple web server using a popular javascript framework called 'Express'. \r\n\r\n<!-- truncate -->\r\n\r\nExpress is a framework that gives node.js superpowers because of its amazing feature. Express is built on top of Node's features to provide easy to use functionality, it runs between the server created by Node.js and the frontend pages of our application.\r\n\r\n**Let us dive in 👨‍💻!**\r\n\r\nSo what is a web server? A web server in simple terms hosts our web pages and web content. To access these contents clients (i.e browsers) make an HTTP request to the server for these contents.\r\n\r\n# Developer Environment setup\r\n\r\nTo follow through with this tutorial you would have to install Node and you can do this by going to the official [Node site](https://nodejs.org/en/). If Node is already installed you can check your node version by opening your command prompt and typing `node -v` . If Node.js is installed the version installed will be displayed.\r\n\r\nSince Node.js is installed, we need to create a directory for the project using the `command mk-dir project-name` (project-name is the name of your directory) you can navigate to the directory with the command `cd project-name`. To start our project and create a package.json file, we run the command `npm init`. A package.json file contains basic information about your project such as the name, author, version, description and dependencies ...we won't be diving into all of that in this article.\r\n\r\n...for starters\r\n\r\n> **npm [Node Package Manager](https://npmjs.com)** is a package manager for the JavaScript programming language maintained by npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js. It consists of an online database of public and paid-for private packages, called the npm registry. It is a command-line tool used to share Node.js packages/modules.\r\n\r\nTo install a package in this project, navigate to your desired directory and run `npm install package-name` on the terminal. to install a package globally, run `npm install package-name --global` (shortcut -g instead of --global). We need to install Express in this project's directory, we'll run the command `npm install express --save`. also for --save (shortcut -s) now our package is added to the list of dependencies in the package.json file.\r\n\r\nNow we are done with the setup, we can now go to building our server.\r\n\r\n# Code along\r\n\r\nNavigate to your code editor and create an index.js file in the directory created earlier.\r\n\r\nNow, we have to import the installed express module.\r\n\r\n```javascript\r\nconst express = require(\"express\");\r\n\r\n// Now we have to create an instance of express\r\nconst app = express();\r\n\r\n// we tell `app` to listen for GET requests to our server based on the specified path ('/') and send a specific response, using the get() method:\r\napp.get(\"/\", (req, res) => res.send(\"My Node.js Web Server 🐱‍🏍!\"));\r\n\r\n\r\n\r\n// we start our web server by telling the app to listen on a specific port (8000 in this case) and run our callback function when the server starts up:\r\napp.listen(8000,  () =>\r\nconsole.log(\"Listening to port 8000 successful!\")\r\n```\r\n\r\n# Starting the Server\r\n\r\nInorder to run the code that we have just written and start up the server, we simply run `node index.js` in our terminal, shortcut to open terminal in vs Code`ctrl + Shift + ` ` , then open localhost:8000 in your browser. You should see the response displayed.\r\n\r\n# Conclusion:\r\n\r\nHope you had fun building this simple web server with express. I hope you keep on learning and building more amazing projects. There will be more articles surrounding web development topics."
    },
    {
      "id": "introduction-to-power-platform",
      "metadata": {
        "permalink": "/blog/introduction-to-power-platform",
        "source": "@site/blog/Introduction to Microsoft Power Platform/index.md",
        "title": "Introduction to Microsoft Power Platform",
        "description": "This article is targeted at young innovative minds, who are passionate about building amazing products with Low-Code tools.",
        "date": "2022-08-16T15:15:21.000Z",
        "formattedDate": "August 16, 2022",
        "tags": [
          {
            "label": "Power Platform",
            "permalink": "/blog/tags/power-platform"
          },
          {
            "label": "LowCode",
            "permalink": "/blog/tags/low-code"
          },
          {
            "label": "Power Pages",
            "permalink": "/blog/tags/power-pages"
          },
          {
            "label": "Power Apps",
            "permalink": "/blog/tags/power-apps"
          },
          {
            "label": "Power Automate",
            "permalink": "/blog/tags/power-automate"
          },
          {
            "label": "Power BI",
            "permalink": "/blog/tags/power-bi"
          }
        ],
        "readingTime": 9.98,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Favour Adeshina",
            "title": "Power Platform Advocate",
            "url": "https://github.com/Favour-dgreat",
            "imageURL": "https://avatars.githubusercontent.com/u/53022031?v=4",
            "key": "favour"
          }
        ],
        "frontMatter": {
          "slug": "introduction-to-power-platform",
          "title": "Introduction to Microsoft Power Platform",
          "authors": "favour",
          "tags": [
            "Power Platform",
            "LowCode",
            "Power Pages",
            "Power Apps",
            "Power Automate",
            "Power BI"
          ]
        },
        "prevItem": {
          "title": "Creating a Node.js web server with Express Framework",
          "permalink": "/blog/Create-a-Node.js-web-server-with-Express-Framework"
        }
      },
      "content": "This article is targeted at young innovative minds, who are passionate about building amazing products with Low-Code tools. \n\nIt will be a detailed break down of Microsoft Power Platform for someone who is just hearing about this for the first time, or someone who needs clarity around what Microsoft Power Platform is about. \n<!-- truncate -->\n\nLets talk!\n\nMicrosoft's Power Platform is a No-Code/Low-Code Platform for Building amazing solutions faster with very little or no code. Hence the reason it is classified as a **Low-Code** product.\n\nPower Platform comprises of five key products, which are: **Power Apps, Power Automate, Power BI, Power Virtual Agents, and recently Power Pages (recently called Portals)**\n\nMicrosoft Power Platform products/tools allows you to automate processes, build mobile and web app solutions faster, analyze data, and create virtual chat agents, powered by Artificial Intelligience. \n\nNow let us learn more about these products: \n\n## Power Apps\n\n![powerapps.jpeg](./Power%20AutomateD.png)\n\nPower Apps provides a rapid low code development environment for building custom apps for business needs. \n\nMicrosoft Power Apps is not used for building ordinary custom applications, but apps built using Power Apps provide rich business logic and workflow capabilities to transform your manual business operations into digital, automated processes.\n\nIt has services, connectors, scalable data services and app platform (Microsoft Dataverse) to allow simple integration and interaction with existing data, giving you the ability to connect with data from different sources using [Standard and Custom Connectors](https://docs.microsoft.com/en-us/power-apps/maker/canvas-apps/connections-list). \n\nWith Power Apps, you build **Canvas apps or  Model-Driven apps**, by connecting your business data that is stored either in the underlying data platform (Microsoft Dataverse) or in various online and on-premises data sources (SharePoint, Excel, Office 365, Dynamics 365, SQL Server, Google Sheets and so on).\n\n*Microsoft Dataverse lets you securely store and manage data that is used by business applications. Data within Dataverse is stored within a set of tables.*\n\nFind out more in this documentation: [What is Microsoft Dataverse?](https://docs.microsoft.com/en-us/power-apps/maker/data-platform/data-platform-intro)\n\n\n### Canvas Apps\nA Canvas app just like the name implies is an app built by dragging and dropping elements onto a canvas, just as you would design a slide in PowerPoint.\n\nCanvas apps give you the flexibility to arrange the user experience and interface the way you want it. Allow your creativity and business sense to guide how you want your apps to look and feel.\n\nWith Canvas apps you build apps that integrate business data from a wide variety of Microsoft and third-party sources. \n\nCheck out this Codelab [Create a canvas app from a sample template in Power Apps](https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/open-and-run-a-sample-app), to find out more and build your first Canvas App. \n\n### Model-Driven Apps\n\nModel-Driven Apps or Process Driven Apps design is an approach that focuses on adding components such as forms, views, and charts and dashboards to tables using an app designer tool. \n\nModel-driven apps starts with your data model – building up from the shape of your core business data and processes in the Dataverse to model forms, views, and other components.\n\nModel-driven apps are highly responsive across several devices.\n\nAdditionally, relationships connect tables together in a way that permits navigation between them and ensures that data is not repeated unnecessarily.\n\nWhile they're called model-driven apps, it is often easier to think of them as data model-driven apps. \n\nThis is because, without a data model housed within [Microsoft Dataverse](https://docs.microsoft.com/en-us/powerapps/maker/model-driven-apps/model-driven-app-glossary#dataverse), you can't create a model-driven app.\n\nUsing the app designer with little or no code, you can build apps that are simple or very complex, connecting with a Microsoft Dataverse.\n\nCheck out this Codelab [Build your first model-driven app](https://docs.microsoft.com/en-us/powerapps/maker/model-driven-apps/build-first-model-driven-app)\n\n\n## Power Automate\n![Power Automate](./Power%20AutomateD%20(1).png)\n\nPower Automate is an online workflow service that automates actions across the most common apps and services.\n\nAn automated process/task simply means streamlining a system by removing human inputs, which decreases errors, increases speed of delivery, boosts quality, minimizes costs, and simplifies the business process. \n\nYou can use Power Automate to automate workflows between your favorite applications and services, sync files, get notifications, collect data, and much more.\n\nA very good use of Power Automate will be to automate the task of sending a requisition to the Team lead or Head of your department in your office/organisation, which is to be carried out every Monday morning. \n\nWith Power Automate, you simply create a flow to perform that task for you every morning, hence ensuring that task is performed always smoothly. \n\nAnother good example will be to monitor what people are saying about your business by creating a flow that runs whenever someone sends a tweet with a certain hashtag. The flow can add details about each tweet to a Facebook post, a SQL Server database, a Microsoft Lists list, or even a Microsoft Excel file that's hosted on OneDrive for Business–-whichever service works for you.\n\n*A flow communicates between your business applications so they can work with each other to eliminate the need for manual processes. A flow begins with a 'trigger', a pre-defined event that then triggers a response.*\n\nTo understand more about Power Automate and Power Automate flows, check out: [Overview of the different types of flows](https://docs.microsoft.com/en-us/power-automate/flow-types).\n\n## Power BI\n![Power BI](./Power%20BI.png)\n\nMicrosoft Power Business Intelligience (BI) is one of the most popular of the five Microsoft Power Platform Products. \n\nPower BI is a very great tool used for data analysis, collaboration and presentation. \n\nPower BI is a collection of software services, apps, and connectors that work together to turn your unrelated sources of data into coherent, visually immersive, and interactive insights. Your data may be an Excel spreadsheet, or a collection of cloud-based and on-premises hybrid data warehouses. \n\nPower BI lets you easily connect to your data sources, visualize and discover what's important, and share that with anyone or everyone you want.\n\nThe three (3) basic **Power BI** elements are: \n1. Power BI Desktop\n2. Power BI Service\n3. Power BI mobile apps. \n\nThese three basic elements all work together with certain functionalities reserved for each of the elements. \n\nPower BI Desktop is a **Windows desktop application**. Power BI Service is an **online *Software as a Service*. Power BI mobile apps are basically apps for iOS and Android devices. \n\nMore recently Power BI have evolved from just being a tool for viewing reports and dashboards, to a tool used to push data into datasets or embed dashboards and reports into your own custom applications. \n\nOne common workflow in Power BI begins by connecting to data sources in Power BI Desktop and building a report. You then publish that report from Power BI Desktop to the Power BI service, and share it so business users in the Power BI service and on mobile devices can view and interact with the report.\n\nTo find out more on Power BI, check out [Power BI documentation](https://docs.microsoft.com/en-us/power-bi/). \n\n## Power Virtual Chat Agents\n\n![Power Virtual Agents](./Power%20virtual%20agents.png)\n\nPower Virtual Agents is another amazing Power Platform Product which is used for building AI Powered ChatBots which can be used in custom websites, Applications, and some social media platforms (Facebook, Microsoft Teams, etc). \n\nPower Virtual Agents are adaptable Artificial Intelligence (AI) chatbots, at your service.\n\nThey can solve common customer and internal-facing issues automatically, freeing up staff to focus on complex requests and high-value interactions. \n\nYou can easily create your own virtual agents, powerful chatbots, without the need for developers or data scientists, by using a guided, no-code graphical interface.\n\n### Important Concepts on Power Virtual Agents ###\n\nWhen you create chatbots with Power Virtual Agents, you author and edit topics. \n\nTopics: Topics are discrete conversation paths that, when used together within a single chatbot, allow for users to have a conversation with a chatbot that feels natural and flows appropriately. \n\nIn Power Virtual Agents, a topic defines how a chatbot conversation plays out. You can author topics by customizing provided templates, create new topics from scratch, or get suggestions from existing help sites.\n\nTrigger phrases: These are phrases, keywords, or questions that a user is likely to type that is related to a specific issue—and conversation nodes—these are what you use to define how a chatbot should respond and what it should do.\n\nThe AI uses natural language understanding to parse what a customer actually types and find the most appropriate trigger phrase or node.\n\nFor example, a user might type \"Open hours\" into your chatbot, the AI will be able to match that to the Store hours topic and begin a conversation that asks which store the customer is interested in, and then display the hours the store is open.\n\nEntities: An entity can be viewed as an information unit that represents a certain type of a real-world subject, like a phone number, zip code, city, or even a person's name.\n\nActions: An Action in Power Virtual Agents simply refers to the integration of a Microsoft Power Automate flow into a Chatbot to perform an action. \n\nRemember I stated it earlier that Microsoft Power Apps enables the creation of web and mobile applications that run on all devices, in this section of the article we will be looking at running a power app on a mobile device. \n\nTo learn more about [Power Virtual Agents](https://docs.microsoft.com/en-us/learn/modules/introduction-power-virtual-agents/). \n\n## Power Pages\n![Power Pages](./Power%20pages.png)\n\nPower Pages, the latest member of the Power Platform family, was announced during Microsoft Build 2022. \n\nMicrosoft Power Pages formerly known as Portals, is a new standalone product. \n\nAs a new standalone Product, Power Pages is a secure, enterprise-grade, low-code software as a service (SaaS) platform, that empowers you to create, host, and administer modern external-facing business websites quickly and easily, that seamlessly work across web browsers and devices.\n\nExtending beyond portals capabilities, Power Pages empowers anyone, regardless of their technical background, with an effective platform to create data-powered, modern, and secure websites.\n\nWith new and exciting features added to this new product, businesses can now have a modern and secure website, which is built on a low-code platform that is business-centric in nature.\n\n### Features and capabilities available in Power Pages\n\n1. The Design Studio: The Design Studio makes it easy to design, style, configure and publish modern business websites. Start from scratch or use one of the ready-to-use templates to design your site pages with text, video, images, business data forms and lists, and more.\n\n2. The Templates Hub: The Templates Hub hosts full-featured websites with demo data, so you can jumpstart your journey to managing scheduling, registration, application submission, and more, with these amazing built templates.\n\n3. Learn Hub: With the Learn Hub, you can explore guides, tutorials, and quick videos to learn how to build websites, model and visualize business data, work with code components, and of course, configure sites. This will help you get started if you are just about building your first website or not quite familiar with building websites using a low-code tool.\n\nAnother amazing reason to try out Power Pages is that Power Pages runs on Microsoft Azure and connects with Dataverse to provide critical security capabilities that include advanced encryption, rich role-based access controls (RBAC), and support for Microsoft Azure Front Door and other web application firewalls. Microsoft Azure DDoS Protection addresses top web security vulnerabilities.\n\nAlso, Visual Studio Code is integrated into Power Pages, using Visual Studio Code in Power Pages, professional developers can code advanced capabilities using JavaScript, Liquid templates, code components, and web APIs. With these tools, you build and can securely interact with underlying business data and implement custom business logic, all without leaving the surface of your favorite developer tools.\n\nMicrosoft Power Platform command line interface also helps developers easily download and upload their customized projects.\n\nTo find out more about Microsoft Power Pages, please visit the [Power Pages Preview documentation] (https://docs.microsoft.com/power-pages/) \n\nIn conclusion, we understood that Microsoft Power Platform Products are a set of Low-Code/No-Code Products, we also talked about the various Power Platform products, looking at their feautres, capabilities and features. \n\nFeel free to try out building amazing products with these tools. \n\nLastly always visit the official Power Platform documentation to find out more about these products: [Microsoft Power Platform documentation](https://docs.microsoft.com/en-us/power-platform/)."
    }
  ]
}